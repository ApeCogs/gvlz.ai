---
import { getCollection } from 'astro:content';
import BaseLayout from '../../../../layouts/BaseLayout.astro';
import EntryItem from '../../../../components/EntryItem.astro';
import BlogmarkItem from '../../../../components/BlogmarkItem.astro';
import NoteItem from '../../../../components/NoteItem.astro';
import QuotationItem from '../../../../components/QuotationItem.astro';
import type { GetStaticPaths } from 'astro';

export const getStaticPaths: GetStaticPaths = async () => {
  const entries = await getCollection('entries', ({ data }) => !data.isDraft);
  const blogmarks = await getCollection('blogmarks', ({ data }) => !data.isDraft);
  const notes = await getCollection('notes', ({ data }) => !data.isDraft);
  const quotations = await getCollection('quotations', ({ data }) => !data.isDraft);

  // Combine all content
  const allContent = [...entries, ...blogmarks, ...notes, ...quotations];

  // Group by date
  const dateGroups = new Map();
  allContent.forEach(item => {
    const date = item.data.created;
    const dateKey = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;
    
    if (!dateGroups.has(dateKey)) {
      dateGroups.set(dateKey, {
        year: date.getFullYear().toString(),
        month: (date.getMonth() + 1).toString().padStart(2, '0'),
        day: date.getDate().toString().padStart(2, '0'),
        date: date,
        items: []
      });
    }
    
    dateGroups.get(dateKey).items.push({
      type: item.collection,
      item: item,
      date: date
    });
  });

  return Array.from(dateGroups.values()).map(group => ({
    params: {
      year: group.year,
      month: group.month,
      day: group.day
    },
    props: {
      items: group.items.sort((a, b) => b.date.getTime() - a.date.getTime()),
      date: group.date
    }
  }));
};

const { items, date } = Astro.props;
const formattedDate = date.toLocaleDateString('en-US', { 
  weekday: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});
---

<BaseLayout title={`Posts from ${formattedDate} - GVLZ.ai`}>
  <Fragment slot="band-content">
    <h2>Posts from {formattedDate}</h2>
  </Fragment>

  <div id="primary">
    {items.map(({ type, item }) => {
      if (type === 'entries') {
        return <EntryItem entry={item} />;
      } else if (type === 'blogmarks') {
        return <BlogmarkItem blogmark={item} />;
      } else if (type === 'notes') {
        return <NoteItem note={item} />;
      } else if (type === 'quotations') {
        return <QuotationItem quotation={item} />;
      }
    })}
    
    {items.length === 0 && (
      <p>No posts for this date.</p>
    )}
  </div>

  <div id="secondary">
    <h3>Navigation</h3>
    <ul class="nav-list">
      <li><a href="/">‚Üê Back to Home</a></li>
      <li><a href="/archive/">Browse Archive</a></li>
    </ul>
  </div>
</BaseLayout>

<style>
  .nav-list {
    list-style: none;
    padding: 0;
  }

  .nav-list li {
    margin-bottom: 0.5rem;
  }
</style>